
 <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBmTCyAoxWibrZ9tlXX2i3XYWOkfBW6f98&callback=initMap">
    </script>
 <div class="page-breadcrumb">
  <div class="row">
    <div class="col-5 align-self-center">
      <h4 class="page-title"> Map Pool</h4>
      <div class="d-flex align-items-center">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="<%= pools_url %>">Pools</a></li>
            <li class="breadcrumb-item"><a href="#">Map Pool</a></li>

          </ol>
        </nav>
      </div>
    </div>
  </div>
  <style type="text/css">
      /* Always set the map height explicitly to define the size of the div
      * element that contains the map. */
      #map {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #floating-panel {
        position: absolute;
           top: 49px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
      }
      #warnings-panel {
        width: 100%;
        height:10%;
        text-align: center;
      }
    </style>

    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-body" style="    max-height: 42px;
          ">
          <% unless flash[:notice].blank? %>
          <div class="flash_team_member">
            <div id="flash_notice_team_member" class="flash_team_member flash_notice_team_member clearfix hide_for_print">
              <%= flash[:notice] %><i class="fa fa-check" style="float:right;"></i>
            </div>
          </div>
          <% end %>
        </div>
       
          <div id="floating-panel">
             <b>Mode of Travel: </b>
    <select id="mode">
      <option value="DRIVING">Driving</option>
      <option value="WALKING">Walking</option>
      <option value="BICYCLING">Bicycling</option>
      <option value="TRANSIT">Transit</option>
    </select>
            <b>Start: </b>
            <select id="start">
              <% @vendors.each do |i| %>
              <option value="<%= i.address.address_name %>"><%= i.address.address_name %></option>
              <% end %>
            </select>
            <b>End: </b>
            <select id="end">
              <% @vendors.each do |i| %>
              <option value="<%= i.address.address_name %>"><%= i.address.address_name %></option>
              <% end %>
            </select>
          </div>
          <div id="map" style="height: 600px;"></div>
          <div id="warnings-panel"></div>
      
      </div>
    </div>
  </div>
</div>










<script>
      function initMap() {
        var markerArray = [];

        // Instantiate a directions service.
        var directionsService = new google.maps.DirectionsService;

        // Create a map and center it on Manhattan.
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 13,
          center: {lat: 40.771, lng: -73.974}
        });

        // Create a renderer for directions and bind it to the map.
        var directionsDisplay = new google.maps.DirectionsRenderer({map: map});

        // Instantiate an info window to hold step text.
        var stepDisplay = new google.maps.InfoWindow;

        // Display the route between the initial start and end selections.
        calculateAndDisplayRoute(
            directionsDisplay, directionsService, markerArray, stepDisplay, map);
        // Listen to change events from the start and end lists.
         document.getElementById('mode').addEventListener('change', function() {
          calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, stepDisplay, map);
        });
        var onChangeHandler = function() {
          calculateAndDisplayRoute(
              directionsDisplay, directionsService, markerArray, stepDisplay, map);
        };

        document.getElementById('start').addEventListener('change', onChangeHandler);
        document.getElementById('end').addEventListener('change', onChangeHandler);
      }

      function calculateAndDisplayRoute(directionsDisplay, directionsService,
          markerArray, stepDisplay, map) {
        // First, remove any existing markers from the map.
        for (var i = 0; i < markerArray.length; i++) {
          markerArray[i].setMap(null);
        }

        // Retrieve the start and end locations and create a DirectionsRequest using
        // WALKING directions.
            var selectedMode = document.getElementById('mode').value;
        directionsService.route({
          origin: document.getElementById('start').value,
          destination: document.getElementById('end').value,
          travelMode: google.maps.TravelMode[selectedMode],
        }, function(response, status) {
          // Route the directions and pass the response to a function to create
          // markers for each step.
          if (status === 'OK') {
            
            directionsDisplay.setDirections(response);
            showSteps(response, markerArray, stepDisplay, map);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      function showSteps(directionResult, markerArray, stepDisplay, map) {
        // For each step, place a marker, and add the text to the marker's infowindow.
        // Also attach the marker to an array so we can keep track of it and remove it
        // when calculating new routes.
       // var myRoute = directionResult.routes[0].legs[0];
        //console.dir(myRoute)
        //for (var i = 0; i < myRoute.steps.length; i++) {
         // var marker = markerArray[i] = markerArray[i] || new google.maps.Marker;
        // marker.setMap(map);
          //marker.setPosition(myRoute.steps[i].start_location);
          //attachInstructionText(
            //  stepDisplay, marker, myRoute.steps[i].instructions, map);
       // }
      }

      function attachInstructionText(stepDisplay, marker, text, map) {
        google.maps.event.addListener(marker, 'click', function() {
          // Open an info window when the marker is clicked on, containing the text
          // of the step.
          stepDisplay.setContent(text);
          stepDisplay.open(map, marker);
        });
      }
    </script>